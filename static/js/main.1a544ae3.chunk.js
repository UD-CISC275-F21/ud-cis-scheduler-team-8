(this["webpackJsonpfinal-project-starter"]=this["webpackJsonpfinal-project-starter"]||[]).push([[0],{18:function(e,t,n){},29:function(e){e.exports=JSON.parse('[{"ID":108,"Name":"CISC108: INTRO TO COMPUTER SCIENCE I","Kind":"Required","Prereq":"None","Description":"Computing and principles of programming with an emphasis on systematic program design. Topics include functional programming, data abstraction, procedural abstraction, use of control and state, recursion, testing, and object-oriented programming concepts. Requires no prior programming experience, open to any major, but intended primarily for majors and minors in computer science or mathematics."},{"ID":181,"Name":"CISC181: INTRO TO COMPUTER SCIENCE II","Kind":"Required","Prereq":"CISC108 or CISC106","Description":"Principles of computer science illustrated and applied through programming in an object oriented language. Programming projects illustrate computational problems, styles and issues that arise in computer systems development and in all application areas of computation."},{"ID":210,"Name":"CISC210: INTRO TO SYSTEMS PROGRAMMING","Kind":"Required","Prereq":"CISC108 or CISC106","Description":"Principles of computer systems programming for software and hardware\xa0platforms to achieve efficient resource usage. Topics include the C programming language, memory management, and awareness of system constraints and interfacing. Projects include programming embedded systems and interactive objects."},{"ID":220,"Name":"CISC220: DATA STRUCTURES","Kind":"Required","Prereq":"CISC210","Description":"Review of data type abstraction, recursion, arrays, stacks, queues, multiple stacks and linked lists. Emphasis on dynamic storage management, garbage collection, trees, graphs, tables, sorting and searching."},{"ID":260,"Name":"CISC260: MACH ORGANZTN & ASSEMBLY LANG","Kind":"Required","Prereq":"CISC210","Description":"Introduction to the basics of machine organization. Programming tools and techniques at the machine and assembly levels. Assembly language programming and computer arithmetic techniques."},{"ID":275,"Name":"CISC275: INTRO TO SOFTWARE ENGINEERING","Kind":"Required","Prereq":"CISC108 and CISC210","Description":"Object oriented software design and development through use of an object oriented programming language. Topics include team programming, design patterns, graphical user interfaces, software engineering tools (e.g., integrated development environments, version control, build management, bug tracking, automated testing)."},{"ID":241,"Name":"MATH241: ANALYTIC GEOMETRY & CALCULUS A","Kind":"Required","Prereq":"MATH117","Description":"Functions, limits, continuity, derivatives. Polynomial, rational, exponential, hyperbolic, logarithmic, trigonometric and inverse trigonometric functions. Definite and indefinite integrals and the Fundamental Theorem of Calculus. Simple differential equations (separable ODE, linear ODE). ODE models leading to exponential growth and decay."},{"ID":242,"Name":"MATH242: ANALYTIC GEOMETRY & CALCULUS B","Kind":"Required","Prereq":"MATH241","Description":"Functions, limits, continuity, derivatives. Polynomial, rational, exponential, hyperbolic, logarithmic, trigonometric and inverse trigonometric functions. Definite and indefinite integrals and the Fundamental Theorem of Calculus. Simple differential equations (separable ODE, linear ODE). ODE models leading to exponential growth and decay."},{"ID":320,"Name":" CISC320: Introduction to Algorithms","Kind":"Electives","Prereq":"CISC220","Description":"Design and analysis of algorithms: worst/average case analysis, proofs for correctness and performance of algorithms. Algorithmic strategies (divide and conquer, greedy methods, dynamic programming, etc.). Algorithms for searching, forming and traversal of strings, trees and graphs. Categorization of computational problems: classes P and NP. NP completeness."},{"ID":360,"Name":"CISC360: Computer Architecture","Kind":"Electives","Prereq":"CISC220 and CISC260","Description":"Principles and techniques used in the architecture of digital computers. Machine elements and their interrelation. Instruction sets, risc vs cisc, registers, busses and switches."},{"ID":361,"Name":" CISC361: Operating Systems","Kind":"Electives","Prereq":"CISC220 and CISC260","Description":"Principles and techniques employed in the development of operating systems and their control programs. Includes management of memory, processors, I/O devices."},{"ID":372,"Name":"CISC372: Parallel Computing","Kind":"Electives","Prereq":"CISC220 and CISC260","Description":"Introduction to parallel computing concepts, methodologies, and tools. Programming and algorithmic techniques for code that will run simultaneously on parallel computing architectures. Topics include: single and multi-core parallelism, shared and distributed memory architectures, concurrency, program decomposition, data distribution, communication, load balancing, scalability, locality, granularity, debugging, performance evaluation."},{"ID":437,"Name":"CISC437: Database Systems","Kind":"Electives","Prereq":"CISC220","Description":"Physical and logical organization of databases. Data retrieval languages, relational database languages, security and integrity, concurrency, distributed databases."},{"ID":110,"Name":"ENGL110: Seminar in Composition","Kind":"Required","Prereq":"None","Description":"Introduction to the process of academic writing that centers on the composition of analytical, research-based essays.."}]')},36:function(e,t,n){},40:function(e,t,n){"use strict";n.r(t);var i=n(1),r=n.n(i),a=n(10),s=n.n(a),o=(n(36),n(7)),c=(n(18),n(23)),l=n(20),d=(n(19),n(24)),m=n(30),u=n(2);var p=function(e){var t=e.semesters,n=(e.setSemesters,t.map((function(e){for(var t=e.courses[0].ID,n=e.courses[0].Name,i=0;i<14;i++)t=e.courses[i].ID,console.log(t),n=e.courses[i].Name,console.log(n);return Object(u.jsx)("div",{children:Object(u.jsx)("div",{children:Object(u.jsx)(c.a,{className:"freshman",children:Object(u.jsxs)("tr",{children:[Object(u.jsxs)("td",{children:[n.toUpperCase(),Object(u.jsx)(l.a,{onClick:function(){}})]}),Object(u.jsxs)("td",{children:[n.toUpperCase(),Object(u.jsx)(l.a,{onClick:function(){}})]})]})})})},t)})));return Object(u.jsxs)(d.a,{className:"pool",children:[Object(u.jsx)("h2",{children:"Schedule"}),Object(u.jsx)("thead",{children:Object(u.jsx)("tr",{children:Object(u.jsx)("th",{children:"FRESHMAN"})})}),Object(u.jsxs)("tbody",{children:[Object(u.jsxs)("tr",{children:[Object(u.jsxs)("td",{children:["Fall",Object(u.jsx)(m.a,{children:"Clear"})]}),Object(u.jsxs)("td",{children:["Spring ",Object(u.jsx)(m.a,{children:"Clear"})]})]}),n]})]})},g=n(46),j=n(21),h=n(3),b=n(47),C=n(42),O=n(43);function f(e){var t=e.course,n=e.pool,r=e.setPool,a=Object(i.useState)(!1),s=Object(o.a)(a,2),c=s[0],l=s[1],d=Object(i.useState)(t.Description),p=Object(o.a)(d,2),g=p[0],j=p[1];return c?Object(u.jsxs)("div",{children:[Object(u.jsx)(b.a,{children:Object(u.jsxs)(b.a.Group,{className:"mb-3",controlId:"addCardForm.answerTextArea",children:[Object(u.jsx)(b.a.Label,{children:"Course Description"}),Object(u.jsx)(b.a.Control,{as:"textarea",rows:3,value:g,onChange:function(e){return j(e.target.value)}})]})}),Object(u.jsx)(m.a,{variant:"success",onClick:function(){r(n.map((function(e){return t.ID===e.ID?Object(h.a)(Object(h.a)({},e),{},{Description:g}):e}))),l(!1)},children:"Save"}),Object(u.jsx)(m.a,{variant:"warning",onClick:function(){j(t.Description),l(!1)},children:"Cancle"}),Object(u.jsx)(m.a,{variant:"danger",onClick:function(){r(n.filter((function(e){return t.ID!==e.ID})))},children:"Delete"})]}):Object(u.jsxs)("div",{children:[" ",Object(u.jsx)(C.a,{children:Object(u.jsx)(O.a,{variant:"primary",checked:c,value:"1",id:"toggle-editing-".concat(t.ID),type:"checkbox",onChange:function(e){return l(e.currentTarget.checked)},children:"Edit"})})]})}var I=function(e){var t=e.pool,n=e.setPool,r=Object(i.useState)(!1),a=Object(o.a)(r,2),s=a[0],c=a[1],l=function(){return c(!1)},p=function(){return c(!0)},h=t.map((function(e){return Object(u.jsxs)("div",{children:[Object(u.jsxs)("div",{children:[Object(u.jsx)(m.a,{variant:"tansparant",onClick:p,children:Object(u.jsx)(j.a,{})}),e.Name.toUpperCase(),Object(u.jsx)(m.a,{variant:"tansparant",onClick:p,children:Object(u.jsx)(j.b,{})}),Object(u.jsx)(f,{course:e,setPool:n,pool:t})]}),Object(u.jsxs)(g.a,{show:s,onHide:l,children:[Object(u.jsx)(g.a.Header,{closeButton:!0,children:Object(u.jsx)(g.a.Title,{children:Object(u.jsxs)("strong",{children:["CISC",e.ID,": ",e.Name]})})}),Object(u.jsx)(g.a.Body,{children:e.Description})]})]},e.ID)}));return Object(u.jsxs)(d.a,{className:"pool",children:[Object(u.jsx)("h2",{children:"Course Pool"}),h]})};var x=function(){return Object(u.jsx)("div",{className:"Head",children:" UD CISC Scheduler "})},S=n(29),D=n(44),v=n(45);var y=function(){var e=Object(i.useState)(S),t=Object(o.a)(e,2),n=t[0],r=t[1],a=Object(i.useState)([]),s=Object(o.a)(a,2),c=s[0],l=s[1];return Object(u.jsxs)(D.a,{className:"App",children:[Object(u.jsx)(v.a,{children:Object(u.jsx)(x,{})}),Object(u.jsxs)(v.a,{children:[Object(u.jsx)(p,{semesters:c,setSemesters:l}),Object(u.jsx)(I,{pool:n,setPool:r})]})]})},N=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,48)).then((function(t){var n=t.getCLS,i=t.getFID,r=t.getFCP,a=t.getLCP,s=t.getTTFB;n(e),i(e),r(e),a(e),s(e)}))};s.a.render(Object(u.jsx)(r.a.StrictMode,{children:Object(u.jsx)(y,{})}),document.getElementById("root")),N()}},[[40,1,2]]]);
//# sourceMappingURL=main.1a544ae3.chunk.js.map