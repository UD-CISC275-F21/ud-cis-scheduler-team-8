{"version":3,"sources":["interfaces/initial_schedule.ts","Component/SemesterControl.tsx","Component/Table.tsx","Component/EDitableCourseItem.tsx","Component/CoursePool.tsx","Header.tsx","Component/Usermessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOCAL_STORAGE_SCHEDULE","INITIAL_SCHEDULE","semesternumber","id","full","season","courses","SemesterControl","semesters","setSemesters","setselectedSemester","semenumber","setSemenumber","Col","Button","onClick","length","localStorage","setItem","JSON","stringify","Tab","useState","className","map","semester","index","Table","striped","bordered","hover","size","senumber","semesternum","newList","filter","oldSemester","i","removeSemester","course","Name","coursename","oldCourse","EditableCourseItem","pool","setPool","editing","setEditing","Description","newDescription","setNewDescription","Form","Group","controlId","Label","Control","as","rows","value","onChange","ev","target","variant","ID","ButtonGroup","ToggleButton","checked","type","event","currentTarget","CoursePool","selectedSemester","show","setShow","ModalCourseID","setModalCourseID","ModalCourseName","setModalCourseName","ModalCourseDescription","setModalCourseDescription","courseItems","newSemester","modifiedList","console","log","Semesterindex","oldSemesterID","oldSemesterFull","oldSemesterSeason","push","alert","PushCourseToSchedule","toUpperCase","showIDinModal","ModalBox","Modal","onHide","Header","closeButton","Title","Body","Popup","handleClose","href","Footer","App","COURSES","rawSchedule","getItem","parse","getLocalStorageUsers","Container","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd8dc5fe.chunk.js","sourcesContent":["import { Semester } from \"../interfaces/semester\";\n\nexport const LOCAL_STORAGE_SCHEDULE = \"UD-CIS-SCHEDULER-TEAM-8-SCHEDULE\";\n\nexport const INITIAL_SCHEDULE: Semester[] = [\n    { semesternumber: 1, id: 2021, full: false, season: \"Fall\", courses: [{\n        \"ID\": 108,\n        \"Name\": \"CISC108: INTRO TO COMPUTER SCIENCE I\",\n        \"Kind\": \"Required\",\n        \"Prereq\": \"None\",\n        \"Description\": \"Computing and principles of programming with an emphasis on systematic program design. Topics include functional programming, data abstraction, procedural abstraction, use of control and state, recursion, testing, and object-oriented programming concepts. Requires no prior programming experience, open to any major, but intended primarily for majors and minors in computer science or mathematics.\"\n    }] },\n    { semesternumber: 2, id: 2021, full: false, season: \"Spring\", courses: [{\n        \"ID\": 108,\n        \"Name\": \"CISC108: INTRO TO COMPUTER SCIENCE I\",\n        \"Kind\": \"Required\",\n        \"Prereq\": \"None\",\n        \"Description\": \"Computing and principles of programming with an emphasis on systematic program design. Topics include functional programming, data abstraction, procedural abstraction, use of control and state, recursion, testing, and object-oriented programming concepts. Requires no prior programming experience, open to any major, but intended primarily for majors and minors in computer science or mathematics.\"\n    }] },\n    { semesternumber: 3, id: 2022, full: false, season: \"Fall\", courses: [{\n        \"ID\": 108,\n        \"Name\": \"CISC108: INTRO TO COMPUTER SCIENCE I\",\n        \"Kind\": \"Required\",\n        \"Prereq\": \"None\",\n        \"Description\": \"Computing and principles of programming with an emphasis on systematic program design. Topics include functional programming, data abstraction, procedural abstraction, use of control and state, recursion, testing, and object-oriented programming concepts. Requires no prior programming experience, open to any major, but intended primarily for majors and minors in computer science or mathematics.\"\n    }] },\n    { semesternumber: 4, id: 2022, full: false, season: \"Spring\", courses: [{\n        \"ID\": 108,\n        \"Name\": \"CISC108: INTRO TO COMPUTER SCIENCE I\",\n        \"Kind\": \"Required\",\n        \"Prereq\": \"None\",\n        \"Description\": \"Computing and principles of programming with an emphasis on systematic program design. Topics include functional programming, data abstraction, procedural abstraction, use of control and state, recursion, testing, and object-oriented programming concepts. Requires no prior programming experience, open to any major, but intended primarily for majors and minors in computer science or mathematics.\"\n    }] },\n];","import React from \"react\";\nimport { Semester } from \"../interfaces/semester\";\nimport { Button, Col } from \"react-bootstrap\";\nimport {INITIAL_SCHEDULE, LOCAL_STORAGE_SCHEDULE} from \"../interfaces/initial_schedule\";\n\n\nexport function getLocalStorageUsers(): Semester[] {\n    const rawSchedule: string | null = localStorage.getItem(LOCAL_STORAGE_SCHEDULE);\n    if (rawSchedule === null) {\n        return [...INITIAL_SCHEDULE];\n    } else {\n        return JSON.parse(rawSchedule);\n    }\n}\n\n\nexport function SemesterControl ({semesters, setSemesters,setselectedSemester, semenumber, setSemenumber}: \n    {semesters: Semester[], setSemesters: (s : Semester[])=>void, \n    semenumber: number, setSemenumber: (n: number)=>void,\n    setselectedSemester:(selected:number)=>void }): JSX.Element{\n\n\n    function save(){\n        localStorage.setItem(LOCAL_STORAGE_SCHEDULE, JSON.stringify(semesters));\n    }\n    \n    function addSemester(){\n        setSemesters([...semesters, {courses:[], full:false, id: (semesters.length/2)+2021, season:\"Spring\", semesternumber: semenumber+1}]);\n        setSemenumber(semenumber+1);\n    }\n\n    \n    function resetAllSemester(){\n        setSemesters([]);\n    }\n    \n    \n    return <Col>\n        <h1>Semester Control</h1>\n\n        <Button onClick= {()=>{\n            addSemester();\n            setselectedSemester(semesters.length);\n        }}>Add Semester</Button>\n\n        <Button onClick= {()=>{\n            save();\n        }}>Save</Button>\n\n        {<Button onClick= {()=>{\n            resetAllSemester();\n        }}>Reset All Semester</Button>}\n    </Col>;\n}","import Table from \"react-bootstrap/Table\";\nimport React, {useState} from \"react\";\nimport { IoRemoveCircleOutline } from \"react-icons/io5\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button} from \"react-bootstrap\";\nimport {Course } from \"../interfaces/courses\";\nimport { Semester } from \"../interfaces/semester\";\n//import { countReset } from \"console\";\nimport {SemesterControl} from \"./SemesterControl\";\nimport \"./Table.css\";\n//import COURSES from \"../assets/courses.json\";\n\n\nexport function Tab({/**course, setCourse,schedule,setSchedule,*/ semesters, setSemesters,setselectedSemester}:\n    {/**course:Course, setCourse:(c:Course)=>void,schedule:Course[], setSchedule:(s:Course[])=>void*/\n    semesters: Semester[], setSemesters: (s : Semester[])=>void, \n   setselectedSemester:(selected:number)=>void}): JSX.Element {\n    const [semenumber, setSemenumber] = useState<number>(1);\n\n    \n\n\n    function removeSemester(semesternum: number){\n        const newList =semesters.filter((oldSemester: Semester): boolean => {\n            return semesternum !== oldSemester.semesternumber;\n        });\n\n        for(let i=0;i<newList.length;i++){\n            //console.log(\"the semester number is \"+semesters[i].semesternumber +\" index is \"+ i);\n            newList[i].semesternumber=i+1;      \n        }\n        setSemesters(newList);\n        //reset numbers in newList\n    }\n\n    // function removeCourse(senumber: number, coursename: string){\n    //     setSemesters(semester.map((semester: Semester)=>{\n    //         semester.courses.filter((oldSemester: Semester): boolean => {\n    //         return coursename !== oldSemester.courses.Name;\n    //     }));\n    // }\n    \n\n    function removeCourse(senumber: number, coursename: string){\n        setSemesters(semesters.map((semester: Semester)=>{\n            if (senumber !== semester.semesternumber){\n                return semester;\n            }else{\n                return {...semester, courses: semester.courses.filter((oldCourse: Course): boolean=>{\n                    return coursename !== oldCourse.Name;\n                })};\n            }\n        }));\n    }\n\n\n    function clearCourses(senumber: number){\n        setSemesters(semesters.map((semester: Semester)=>{\n            if (senumber !== semester.semesternumber){\n                return semester;\n            }else{\n                return {...semester, courses:[]};\n            }\n        }));\n    }\n    \n    return <div className = \"classtable\">\n        <SemesterControl semesters={semesters} setSemesters= {setSemesters} semenumber={semenumber} setSemenumber={setSemenumber} setselectedSemester={setselectedSemester}/>\n        {semesters.map((semester: Semester, index: number) =>{ \n            return <Table striped bordered hover size=\"sm\" key = {semester.semesternumber} onClick={()=>setselectedSemester(semester.semesternumber-1)} >\n                <thead> \n                    <tr>\n                        <td>Semester {index+1} <Button onClick= {()=>{\n                            clearCourses(semester.semesternumber);\n                        }}>Clear</Button><IoRemoveCircleOutline onClick= {()=>{\n                            removeSemester(semester.semesternumber);\n                            //resetSemesterNumbers();\n                        }}/></td>\n                    </tr>\n                </thead> \n                <tbody>\n                    <tr className = \"courses\">\n                        {semester.courses.map((course: Course, index: number) =>{\n                            return <td key = {index}>{course.Name} <IoRemoveCircleOutline onClick= {()=>{\n                                removeCourse(semester.semesternumber, course.Name);\n                                \n                            }}/></td>;\n                        })}\n                    </tr>\n                </tbody>\n            </Table>;\n        })}\n    </div>;\n}\n\nexport default Tab;\n    \n/**function deleteButton(): void{\n        setSemesters(semesters.filter((oldSemester: Semester): boolean => {\n            return semesters.courses !== oldSemester.courses;\n        }));\n    }*/\n\n/*return <Col className=\"pool\">\n        <h2>Schedule</h2>\n        <thead>\n            <tr>\n                <th>FRESHMAN</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Fall<Button>Clear</Button></td>\n                <td>Spring <Button>Clear</Button></td>\n            </tr>\n            {semesterItems}\n        </tbody>\n    </Col>;*/\n    \n\n\n\n/**return <Col className=\"planner\">\n        <h2>CISC PLANNER</h2>\n        <Table className=\"freshman\">\n            <thead>\n                <tr>\n                    <th>FRESHMAN</th>\n                    <th> </th></tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Fall <Button onClick={() => setSchedule([])}>Clear</Button></td>\n                    <td>Spring <Button>Clear</Button></td></tr>\n                <tr>\n                    <td>{schedule[0].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline onClick={() => setSchedule([])}/></Button></td> \n                    <td>{schedule[1].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td>{schedule[6].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td>{schedule[7].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td>{schedule[13].Name}<Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                    <td>{schedule[2].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                </tr>\n            </tbody>\n        </Table>\n        <Table className=\"sophomore\">\n            <thead>\n                <tr>\n                    <th>SOPHOMORE</th>\n                    <th> </th></tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Fall</td>\n                    <td>Spring</td></tr>\n                <tr>\n                    <td>{schedule[3].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td>{schedule[5].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td>{schedule[4].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td>{schedule[8].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td> <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                    <td>{schedule[9].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                </tr>\n            </tbody>\n        </Table>\n        <Table className=\"junior\">\n            <thead>\n                <tr>\n                    <th>JUNIOR</th>\n                    <th> </th></tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Fall</td>\n                    <td>Spring</td></tr>\n                <tr>\n                    <td>{schedule[10].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td>{schedule[11].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td>{schedule[12].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td> <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td> <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                    <td> <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                </tr>\n            </tbody>\n        </Table>\n        <Table className=\"senior\">\n            <thead>\n                <tr>\n                    <th>SENIOR</th>\n                    <th> </th></tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Fall</td>\n                    <td>Spring</td></tr>\n                <tr>\n                    <td>{schedule[0].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td>{schedule[1].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td>{schedule[6].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                    <td>{schedule[7].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td> \n                </tr>\n                <tr>\n                    <td>{schedule[13].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                    <td>{schedule[2].Name} <Button variant=\"transparent\" onClick={()=>setCourse(COURSES[1] as Course)}><IoRemoveCircleOutline /></Button></td>\n                </tr>\n            </tbody>\n        </Table>\n    </Col>;\n    */\n","import React, {useState} from \"react\";\nimport { Course } from \"../interfaces/courses\";\nimport { ToggleButton, ButtonGroup, Form, Button } from \"react-bootstrap\";\n\nexport function EditableCourseItem ({course, pool, setPool}: \n    {course: Course, pool: Course[], setPool: (pool: Course[])=>void}):JSX.Element {\n    const [editing, setEditing] = useState<boolean>(false);\n    const [newDescription, setNewDescription] = useState<string>(course.Description);\n    // onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setQuestion(ev.target.value)}\n    // onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}\n\n    //change the descriprion function\n     \n    function updatePool (): void {\n        setPool(pool.map((oldCourse: Course): Course => {\n            return course.ID === oldCourse.ID ?\n                {...oldCourse, Description: newDescription \n                /** you can add more here ie.(ID: newID) if you make new const before */}:\n                oldCourse;\n        }));\n    }\n\n    function resetEditableReigon(): void{\n        setNewDescription(course.Description);\n        /** similarly, you can add more pool elements here if you put more\n         * const before, (ie. setNewID(course.ID);)\n        */\n    }\n\n    function deleteButton(): void{\n        setPool(pool.filter((oldCourse: Course): boolean => {\n            return course.ID !== oldCourse.ID;\n        }));\n    }\n\n    return editing ?\n        <div>\n            \n            <Form>\n                <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\n                    <Form.Label>Course Description</Form.Label>\n                    <Form.Control as=\"textarea\" rows={3} \n                        value={newDescription}\n                        // onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDescription(ev.target.value)}\n                        onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setNewDescription(ev.target.value)}/>\n                </Form.Group>\n            </Form>\n\n\n            <Button variant= \"success\" onClick = {()=>{\n                updatePool();\n                setEditing(false);\n            }}>Save</Button>\n            \n            <Button variant= \"warning\" onClick = {()=>{\n                resetEditableReigon();\n                setEditing(false);\n            }}>Cancel</Button>\n\n            <Button variant= \"danger\" onClick = {()=>{\n                deleteButton();\n            }}>Delete</Button>\n\n        </div> :\n        <div>\n            {/*course.ID*/} {/*course.Name*/}\n\n            <ButtonGroup>\n                <ToggleButton variant= \"primary\" checked = {editing} value = \"1\"\n                    id={`toggle-editing-${course.ID}`}\n                    type = \"checkbox\"\n                    onChange = {(event) => setEditing(event.currentTarget.checked)}>\n                    Edit\n                </ToggleButton>\n            </ButtonGroup>\n        </div>;\n}","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport { Course } from \"../interfaces/courses\";\nimport { Semester } from \"../interfaces/semester\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n//import { propTypes } from \"react-bootstrap/esm/Image\";\n\nimport { Button, Col, Modal } from \"react-bootstrap\";\nimport { IoIosMore, IoIosAddCircleOutline } from \"react-icons/io\";\nimport { EditableCourseItem } from \"./EDitableCourseItem\";\n\n\nexport function CoursePool({ pool, setPool, semesters, setSemesters, selectedSemester }: {\n    pool: Course[], setPool: (newpool: Course[]) => void,\n    selectedSemester: number,\n    semesters: Semester[], setSemesters: (schedule: Semester[]) => void\n}): JSX.Element {\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [ModalCourseID,setModalCourseID]=useState<number>();\n    const [ModalCourseName,setModalCourseName]=useState<string>();\n    const [ModalCourseDescription,setModalCourseDescription]=useState<string>();\n    //LOC(list of cources)\n\n    /*function ReturnLastSemesterIndex() {\n        let currentindexcount = 0;\n        for (let i = 0; i < semesters.length-1; i++) {\n\n            if (semesters[i].full == true) {\n                //console.log(i);\n                currentindexcount += 1;\n            }\n        }\n        return currentindexcount;\n    }*/\n\n\n\n    function PushCourseToSchedule(course: Course) {\n        if (semesters.length === 0) {\n            const newSemester: Semester = {\n                semesternumber: 1,\n                id: 2020,\n                full: false,\n                courses: [course],\n                season: \"Fall\"\n            };\n            const modifiedList = [...semesters];\n\n            modifiedList[0] = newSemester;\n            setSemesters(modifiedList);\n            //setSemesters([newSemester]);\n            console.log(semesters);\n            //const modifiedList = semesters.map((semester, index,) => index === 0 ? newSemester : semester)\n            //setSemesters([semesters[0],newSemester]);\n        } else if (semesters[selectedSemester].courses.length <= 5) {\n            const Semesterindex = selectedSemester;\n            //const Semesterindex = semesters.length - 1;\n            //console.log(Semesterindex);\n            const oldSemesterID = semesters[selectedSemester].id;\n            let oldSemesterFull = semesters[selectedSemester].full;\n            const oldSemesterSeason = semesters[selectedSemester].season;\n            const courses = [...semesters[selectedSemester].courses];\n            if (semesters[Semesterindex].courses.length === 5) {\n                oldSemesterFull = true;\n            }\n\n            courses.push(course);\n            const newSemester: Semester = {\n                semesternumber: semesters[selectedSemester].semesternumber,\n                id: oldSemesterID,\n                full: oldSemesterFull,\n                courses: courses,\n                season: oldSemesterSeason\n            };\n            //console.log(\"else\");\n            //const modifiedList = semesters.map((item, index) => index === 0 ? newSemester : item);\n            const modifiedList = [...semesters];\n            console.log(\"the semester index is \" + Semesterindex);\n            modifiedList[Semesterindex] = newSemester;\n\n            setSemesters(modifiedList);\n\n            //console.log(semesters);\n\n        } else {\n            alert(\"You may only add six classes to a semester. Please select or add another semester. \");\n        }\n\n\n\n        //setSchedule([...schedule, course]);\n        //console.log(schedule);\n\n    }\n\n    function showIDinModal(course:Course){\n        setModalCourseID(course.ID);\n        setModalCourseName(course.Name);\n        setModalCourseDescription(course.Description);\n\n    }\n\n\n\n    //const [ActiveCourse, SetActiveCourse] = useState();\n\n\n    const courseItems = pool.map(function (course: Course): JSX.Element {\n        return <div key={course.ID}>\n            <div><Button variant=\"tansparant\" onClick={() => PushCourseToSchedule(course) }><IoIosAddCircleOutline /></Button>\n                {course.Name.toUpperCase()}\n                <Button variant=\"tansparant\" onClick={()=>{ \n                    handleShow(); \n                    showIDinModal(course);\n                } }><IoIosMore /></Button><EditableCourseItem course={course} setPool={setPool} pool={pool} />\n            </div>\n\n            \n\n\n        </div>;\n\n    });\n\n    const ModalBox = <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n            <Modal.Title>\n                <strong>CISC{ModalCourseID}: {ModalCourseName}</strong>\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            {ModalCourseDescription}\n        </Modal.Body>\n    </Modal>;\n\n\n\n\n    return <Col className=\"pool\">\n        <h2>Course Pool</h2>\n        {ModalBox}\n        {courseItems}\n\n\n\n    </Col>;\n}\n\n\n/*\n\n <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <strong>CISC{course.ID}: {course.Name}</strong>\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {course.Description}\n                </Modal.Body>\n            </Modal>\n\n\n\n\n\n\n\n\n <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <strong>CISC{pool[0].ID}: {pool[0].Name}</strong>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {pool[0].Description}\n            </Modal.Body>\n        </Modal>\n\n\n\nfunction Course_pull(): JSX.Element {\n    return (\n\n        <div>\n\n\n            <table className=\"course_Pool\">\n                \n                <thead>\n                    <tr>\n                        <th scope=\"col\"># course ID</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Type</th>\n                        <th scope=\"col\">Prerequisite</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th scope=\"row\">CISC108</th>\n                        <td>Introduction to Computer Science I</td>\n                        <td>Required</td>\n                        <td>N/A</td>\n                    </tr>\n                    <tr>\n                        <th scope=\"row\">CISC181</th>\n                        <td>Introduction to Computer Science II</td>\n                        <td>Required</td>\n                        <td>CISC108 OR CISC106</td>\n                    </tr>\n                    <tr>\n                        <th scope=\"row\">CISC210</th>\n                        <td>Introduction to Systems Programming</td>\n                        <td>Required</td>\n                        <td>CISC108 OR CISC106</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\n\nfunction Course_pull(): JSX.Element {\n    \n    const List_of_Classes: (string | number)[][] = [];\n    List_of_Classes[0] = [108, \" Introduction to computer Science 1\"];\n    List_of_Classes[1] = [181, \" Introduction to computer Science 2\"];\n    List_of_Classes[2] = [210, \" Introduction to computer Programming\"];\n    List_of_Classes[3] = [220, \" Data Structures\"];\n    List_of_Classes[4] = [241, \" Calculus 1\"];\n    List_of_Classes[5] = [275, \" Introduction to Software Engineering\"];\n    List_of_Classes[6] = [355, \" Computers, Ethics and Society\"];\n    List_of_Classes[7] = [110, \" Seminar in Composition\"];\n    List_of_Classes[8] = [242, \" Calculus 2\"];\n    const list: JSX.Element[] = [];\n\n\n\n\n\n    for (let i = 0; i < 9; i++) {\n        const box =\n            <div key={i} className=\"item\" onClick={() => Fire_item(i)}>\n                <li >Course ID:_ </li>\n                <div>{List_of_Classes[i][0]}</div>\n                {/*List_of_Classes[i]}\n                <li>Title_</li>\n                <div> {List_of_Classes[i][1]}</div>\n            </div>;\n        list[i] = box;\n    }\n\n\n    function Fire_item(id: number) {\n        props.clickHandler(id);\n\n\n\n\n    }\n\n\n    return <div className=\"course_Pool\"> {list}</div>;\n}\n*/\n\n\n\nexport default CoursePool;\n","import React from \"react\";\nimport \"./App.css\";\n\nfunction Header(): JSX.Element {\n    return (\n        <div className = \"Head\"> UD CISC Scheduler </div>\n        \n    );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\n\nexport function Popup() :JSX.Element{\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={handleShow}>\n                Help\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Welcome to UD CISC Scheduler</Modal.Title>\n                </Modal.Header>\n                <Modal.Body><p>Set up your semester plan by adding semesters and courses you need from the course pool.</p>\n                    Check out <a href=\"https://www1.udel.edu/registrar/\">Office of the Registrar</a> for more details.\n                    <p><b>Questions?</b>\n                    Contact the Registrar`s Office - Registrar@udel.edu or 302-831-2131.</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    \n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Tab from \"./Component/Table\";\nimport CoursePool from \"./Component/CoursePool\";\nimport Header from \"./Header\";\nimport COURSES from \"./assets/courses.json\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { Course} from \"./interfaces/courses\";\nimport { Semester } from \"./interfaces/semester\";\nimport { Popup } from \"./Component/Usermessage\";\nimport {getLocalStorageUsers} from  \"./Component/SemesterControl\";\n\nfunction App(): JSX.Element {\n\n    const [pool, setPool] = useState<Course[]>(COURSES);\n    //const [schedule,setSchedule] = useState <Course[]>(COURSES);\n    //const [ActiveCourse, SetActiveCourse] = useState<Course>(COURSES[0]);\n    const [semesters, setSemesters] = useState<Semester[]>(getLocalStorageUsers());\n    const [selectedSemester,setselectedSemester] =useState(0);\n\n   \n    return (\n        <Container className=\"App\">\n            <Row>\n                <Header />\n                <Popup />\n            </Row>\n            <Row>\n                <Tab\n                    /**schedule={schedule}\n                    setSchedule={setSchedule}\n                    course={ActiveCourse}\n                    setCourse={SetActiveCourse}\n                    */\n                    \n                    setselectedSemester={setselectedSemester}\n                    semesters={semesters}\n                    setSemesters={setSemesters}></Tab>\n                <CoursePool pool={pool} setPool={setPool} semesters={semesters} setSemesters={setSemesters} selectedSemester={selectedSemester}   ></CoursePool>\n            </Row>\n\n        </Container>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        \n        \n        <App /> \n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}